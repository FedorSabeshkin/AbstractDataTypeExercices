В java работают из коробки, 
1. Наследование публичного метода, который будет публичным в потомке
Но
2. Приватный метод предка не будет доступен в его потомках
Следовательно
3. Мы не можем для приватного метода предка увеличить область видимости в потомке
4. Для публичного метода предка мы не можем сузить область видимости в потомке

Отдельно рассматриваются случаи с модификаторами protected и package-private.
Protected можем расширить до public
package-private(default) так же не может быть сведен до private в потомках.

==
Рефлексия: попытка приведения типа.

Узнал о существовании оператора isAssignableFrom, который помогает определять NPE, в отличии от instanceOf, который просто вернет false

Я сделал без дженериков, выполнив реализацию под конкретный класс. 
Интересно сделана реализация, без типизации всего класса, под какие-либо дженерики.

Вновь вспомнил о том, как можно типизировать методы, непосредственно в момент их вызова. 
Хороший пример:

public class Util {
    public static <K, V> boolean compare(Pair<K, V> p1, Pair<K, V> p2) {
        return p1.getKey().equals(p2.getKey()) &&
               p1.getValue().equals(p2.getValue());
    }
}

// ...

boolean same = Util.<Integer, String>compare(p1, p2);

Странно, что в образцовом примере, не используется оператор "new" при возврате None;